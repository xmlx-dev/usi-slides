name: 🔧 Build 📺 slides and 🧮 demos, and 🚀 deploy them to GitHub Pages
on: push
jobs:
  build-n-deploy:
    name: Build and deploy
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    steps:
    - name: Checkout code 🛎️
      uses: actions/checkout@v3
      with:
        persist-credentials: false
    - name: Set up SSH keys 🔑
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: |
          ${{ secrets.XML_BOOK_CODE_DEPLOY_KEY }}
    - name: Cache builds, models and data
      uses: actions/cache@v3
      with:
        path: |
          /home/runner/.cache/torch
        key: ${{ runner.os }}-data_models
    - name: Set up Python 3.9 🐍
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        cache: 'pip'
    - name: Install LaTeX
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          dvipng \
          texlive \
          texlive-xetex \
          texlive-fonts-recommended \
          cm-super
    - name: Install Quarto 💾
      run: |
        wget -O quarto.deb https://github.com/quarto-dev/quarto-cli/releases/download/v1.2.313/quarto-1.2.313-linux-amd64.deb
        QUARTO_INSTALLER=$(readlink -f quarto.deb)
        sudo dpkg -i "$QUARTO_INSTALLER"
        sudo apt-get install -f
    - name: Install Quarto and Python dependencies 💾
      run: |
        pip install -r requirements.txt
        # pip install git+https://xmlx-concierge:${{ secrets.CONCIERGE_ACCESS_TOKEN }}@github.com/xmlx-dev/xml-book-code.git@turing-release
        quarto install extension --no-prompt quarto-ext/fontawesome
    - name: Get PyTorch model
      run: |
        python -c 'import torchvision.models as models; models.inception_v3(pretrained=True);'
        python -c 'import torchvision.models as models; models.alexnet(pretrained=True);'
    - name: 🔧 Build Jupyter Notebooks 🧮 (demos)
      run: make build-demos
    - name: 🔧 Build Quarto Slides 📺 (slides)
      run: make build-slides
    - name: Add web README.md
      run: cp slides/_web_readme.md _build/README.md
    - name: Deploy (Custom Domain) 🚀
      if: github.ref == 'refs/heads/master'
      uses: JamesIves/github-pages-deploy-action@3.7.1
      with:
        GITHUB_TOKEN: ${{ secrets.CONCIERGE_ACCESS_TOKEN }}
        REPOSITORY_NAME: xmlx-dev/usi-slides-page
        BRANCH: webpage
        FOLDER: _build
        CLEAN: true
    - name: Deploy Preparation (Mirror) 🔧
      run: rm _build/CNAME
    - name: Deploy (Mirror) 🚀
      if: github.ref == 'refs/heads/master'
      uses: JamesIves/github-pages-deploy-action@3.7.1
      with:
        GITHUB_TOKEN: ${{ secrets.CONCIERGE_ACCESS_TOKEN }}
        REPOSITORY_NAME: xmlx-dev/usi-slides-mirror
        BRANCH: webpage
        FOLDER: _build
        CLEAN: true
    - name: 📦 Prepare GitHub Release 🚀
      if: startsWith(github.ref, 'refs/tags')
      run: |
        cd _build; zip -r ../static_page.zip ./*; cd ..
        echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
    - name: 📦 Create GitHub Release 🚀
      if: startsWith(github.ref, 'refs/tags')
      uses: marvinpinto/action-automatic-releases@latest
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        automatic_release_tag: ${{ env.RELEASE_VERSION }}
        prerelease: false
        title: "Static Page Package ${{ env.RELEASE_VERSION }}"
        files: static_page.zip
